from PIL import Image,ImageDraw
import numpy as np
from math import pi,cos,sqrt




imageFilename = 'C:\\Users\\Admin\\PycharmProjects\\STEGO_lab3\\imagesample.bmp'

image = Image.open(imageFilename)
draw = ImageDraw.Draw(image)
width = image.size[0]
height = image.size[1]

if width % 8 != 0 or height % 8 != 0:
    print("Размеры изображения не подходят")
    exit(88)

pix = image.load()

message_to_hide = input("Введите слово: ")
message_to_hide = message_to_hide.encode('utf-8')
list_bytes = list(message_to_hide)
hidden = ""
for byte in list_bytes:
    hidden += bin(byte)[2:].zfill(8)
hidden = list(hidden)
hidden3 = "".join(hidden)
hidden_len = len(hidden)
hidden_len2 = hidden_len
hidden_len3 = hidden_len
hidden2 = ''
print("Встроенное сообщение: ","".join(hidden))


def encode(block88):
    global hidden_len
    global hidden
    for i in range(5, 8):
        for j in range(5, 8):
            if hidden_len > 0:
                digit = hidden.pop(0)
                if block88[i][j] % 2 == 0:
                    if digit == '1':
                        block88[i][j] += 1
                else:
                    if digit == '0':
                        block88[i][j] -= 1
                hidden_len -= 1
            else:
                return 0, block88
    return 1, block88


def decode(block88):
    global hidden_len2
    global hidden2
    for i in range(5, 8):
        for j in range(5, 8):
            if hidden_len2 > 0:
                hidden2 += bin(block88[i][j])[-1]
                hidden_len2 -= 1
            else:
                return 0, block88
    return 1, block88


def dct(block88):
    new_block = [[0, 0, 0, 0, 0, 0, 0, 0] for i in range(8)]
    for u in range(8):
        for v in range(8):
            cell_sol = 0
            for x in range(8):
                for y in range(8):
                    first_cos = cos(((2 * x + 1) * u * pi) / 16)
                    second_cos = cos(((2 * y + 1) * v * pi) / 16)
                    mul_cos = first_cos * second_cos
                    block_value = block88[x][y] - 128
                    inter_sol = mul_cos * block_value
                    cell_sol += inter_sol
            if u == 0:
                Cu = 1 / sqrt(2)
            else:
                Cu = 1
            if v == 0:
                Cv = 1 / sqrt(2)
            else:
                Cv = 1
            new_block[u][v] = int(round(((Cu * Cv) / 4) * cell_sol))

    return new_block


def idct(block88):
    begin_block = [[0, 0, 0, 0, 0, 0, 0, 0] for i in range(8)]
    for x in range(8):
        for y in range(8):
            cell_sol = 0
            for u in range(8):
                for v in range(8):
                    first_cos = cos(((2 * x + 1) / 16) * u * pi)
                    second_cos = cos(((2 * y + 1) / 16) * v * pi)
                    mul_cos = first_cos * second_cos
                    block_value = block88[u][v]
                    if u == 0:
                        Cu = 1 / sqrt(2)
                    else:
                        Cu = 1
                    if v == 0:
                        Cv = 1 / sqrt(2)
                    else:
                        Cv = 1
                    inter_sol = Cv * Cu * mul_cos * block_value
                    cell_sol += inter_sol
            begin_block[x][y] = int(round(cell_sol / 4 + 128))
    return begin_block


temp_block = []
img_array = np.empty(shape=[0, width],dtype='int8')
img_blocks = []

for y in range(height):
    for x in range(width):
        temp_block.append(pix[x, y][0])
    img_blocks.append(temp_block)
    img_array = np.append(img_array, [temp_block], axis=0)
    temp_block = []

# основная часть

a = 1
for r in range(0,height - 8, 8):
    for c in range(0, width - 8, 8):
        block88 = img_array[r:r + 8, c:c + 8]
        if a == 0:
            for i in range(8):
                for j in range(8):
                    img_blocks[r + i][c + j] = decoded_block88[i][j]
        else:
            block88 = dct(block88)
            a, block88 = encode(block88)
            decoded_block88 = idct(block88)

            for i in range(8):
                for j in range(8):
                    img_blocks[r + i][c + j] = decoded_block88[i][j]

for y in range(height):
    for x in range(width):
        r = img_blocks[y][x]
        g = pix[x, y][1]
        b = pix[x, y][2]
        draw.point((x, y), (r,g,b))

image.save("C:\\Users\\Admin\\PycharmProjects\\STEGO_lab3\\result.bmp", "bmp")

temp_block = []
img_array = np.empty(shape=[0, width],dtype='int8')

for y in range(height):
    for x in range(width):
        temp_block.append(pix[x, y][0])
    img_array = np.append(img_array, [temp_block], axis=0)
    temp_block = []

a = 1
for r in range(0,height - 8, 8):
    for c in range(0, width - 8, 8):
        block88 = img_array[r:r + 8, c:c + 8]
        if a == 0:
            print("Извлеченное сообщение: ", hidden2)
            counter = 0
            for i, j in zip(hidden3, hidden2):
                if i == j:
                    counter += 1
            print(f"Процент совпадения: {round(counter / hidden_len3, 2) * 100}%")
            exit(99)
        else:
            block88 = dct(block88)
            a, block88 = decode(block88)


